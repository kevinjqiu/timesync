// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timesync.proto

package pkg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerTime struct {
	Ts                   int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerTime) Reset()         { *m = ServerTime{} }
func (m *ServerTime) String() string { return proto.CompactTextString(m) }
func (*ServerTime) ProtoMessage()    {}
func (*ServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_8840aac0fba3c4ab, []int{0}
}

func (m *ServerTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerTime.Unmarshal(m, b)
}
func (m *ServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerTime.Marshal(b, m, deterministic)
}
func (m *ServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerTime.Merge(m, src)
}
func (m *ServerTime) XXX_Size() int {
	return xxx_messageInfo_ServerTime.Size(m)
}
func (m *ServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ServerTime proto.InternalMessageInfo

func (m *ServerTime) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type GetServerTimeParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServerTimeParams) Reset()         { *m = GetServerTimeParams{} }
func (m *GetServerTimeParams) String() string { return proto.CompactTextString(m) }
func (*GetServerTimeParams) ProtoMessage()    {}
func (*GetServerTimeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8840aac0fba3c4ab, []int{1}
}

func (m *GetServerTimeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServerTimeParams.Unmarshal(m, b)
}
func (m *GetServerTimeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServerTimeParams.Marshal(b, m, deterministic)
}
func (m *GetServerTimeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerTimeParams.Merge(m, src)
}
func (m *GetServerTimeParams) XXX_Size() int {
	return xxx_messageInfo_GetServerTimeParams.Size(m)
}
func (m *GetServerTimeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerTimeParams.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerTimeParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ServerTime)(nil), "pkg.ServerTime")
	proto.RegisterType((*GetServerTimeParams)(nil), "pkg.GetServerTimeParams")
}

func init() { proto.RegisterFile("timesync.proto", fileDescriptor_8840aac0fba3c4ab) }

var fileDescriptor_8840aac0fba3c4ab = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc9, 0xcc, 0x4d,
	0x2d, 0xae, 0xcc, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0xc8, 0x4e, 0x57,
	0x92, 0xe1, 0xe2, 0x0a, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x0a, 0xc9, 0xcc, 0x4d, 0x15, 0xe2, 0xe3,
	0x62, 0x2a, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0x2a, 0x29, 0x56, 0x12, 0xe5,
	0x12, 0x76, 0x4f, 0x2d, 0x41, 0x28, 0x08, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x36, 0xf2, 0xe0, 0xe2,
	0x00, 0xf1, 0x82, 0x2b, 0xf3, 0x92, 0x85, 0x6c, 0xb8, 0x78, 0x51, 0x94, 0x08, 0x49, 0xe8, 0x15,
	0x64, 0xa7, 0xeb, 0x61, 0xd1, 0x26, 0xc5, 0x0f, 0x96, 0x41, 0x08, 0x2b, 0x31, 0x24, 0xb1, 0x81,
	0x9d, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xe5, 0xa2, 0x6e, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeSyncClient is the client API for TimeSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeSyncClient interface {
	GetServerTime(ctx context.Context, in *GetServerTimeParams, opts ...grpc.CallOption) (*ServerTime, error)
}

type timeSyncClient struct {
	cc *grpc.ClientConn
}

func NewTimeSyncClient(cc *grpc.ClientConn) TimeSyncClient {
	return &timeSyncClient{cc}
}

func (c *timeSyncClient) GetServerTime(ctx context.Context, in *GetServerTimeParams, opts ...grpc.CallOption) (*ServerTime, error) {
	out := new(ServerTime)
	err := c.cc.Invoke(ctx, "/pkg.TimeSync/GetServerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSyncServer is the server API for TimeSync service.
type TimeSyncServer interface {
	GetServerTime(context.Context, *GetServerTimeParams) (*ServerTime, error)
}

// UnimplementedTimeSyncServer can be embedded to have forward compatible implementations.
type UnimplementedTimeSyncServer struct {
}

func (*UnimplementedTimeSyncServer) GetServerTime(ctx context.Context, req *GetServerTimeParams) (*ServerTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTime not implemented")
}

func RegisterTimeSyncServer(s *grpc.Server, srv TimeSyncServer) {
	s.RegisterService(&_TimeSync_serviceDesc, srv)
}

func _TimeSync_GetServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerTimeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSyncServer).GetServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.TimeSync/GetServerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSyncServer).GetServerTime(ctx, req.(*GetServerTimeParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.TimeSync",
	HandlerType: (*TimeSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerTime",
			Handler:    _TimeSync_GetServerTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timesync.proto",
}
